<?xml version="1.0" encoding="utf-8"?>
<mx:Application 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:csxs="com.adobe.csxs.core.*"
	xmlns:utils="utils.*" 
	xmlns:collections="mx.collections.*"
	applicationComplete="onApplicationComplete()"
	historyManagementEnabled="false"
	layout="absolute"
	usePreloader="false" 
	backgroundColor="0xFFFFFF"
	backgroundAlpha="1.0"
	
	>
	<mx:Script>
		<![CDATA[
			import com.adobe.csawlib.illustrator.Illustrator;
			import com.adobe.csxs.core.CSXSInterface;
			import com.adobe.csxs.core.csxs_internal;
			import com.adobe.csxs.events.StateChangeEvent;
			import com.adobe.csxs.types.WindowGeometry;
			import com.adobe.illustrator.*;
			
			import export.ExportOperation;
			
			import flash.filesystem.File;
			
			import managers.*;
			import managers.IllustratorController;
			import managers.data.PublishingItem;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Grouping;
			import mx.collections.GroupingField;
			import mx.collections.HierarchicalCollectionView;
			import mx.collections.IViewCursor;
			import mx.controls.ToolTip;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.ContainerLayout;
			import mx.core.mx_internal;
			import mx.events.AIREvent;
			import mx.events.AdvancedDataGridEvent;
			import mx.events.CollectionEvent;
			import mx.events.DataGridEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.ResizeEvent;
			import mx.managers.ToolTipManager;
			
			[Bindable]
			private var model:AppModel = AppModel.getInstance(); 
			private var controller:AppController;
			
			private function onApplicationComplete():void{
				
				controller = AppController.getInstance();
				model.addEventListener("dataGridProviderChanged", dataGridProviderChangedHandler);
				
				ToolTipManager.showDelay = 1000;
				ToolTipManager.hideDelay = 10000;
				
				styleDeclaration.setStyle("backgroundColor", "0xFFFFFF");
				model.initialize();
				
//				AutoTheme.sync();
			}
			
			protected function dataGridProviderChangedHandler (event:Event):void {
//				gc.refresh();
				grid.expandAll();
			}
			
			
			protected function addNewAsset_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				model.addNewDefaultFile();
				controller.fitViewportToAssetComposition(model.getAssetCompositionByIndex(model.dataProvider.length - 1));
			}
						
			public function hyphenate(item:Object, column:DataGridColumn):String {
				var title: String  = item[column.dataField].toString();
				if (column.width  < column.minWidth) {
					return "..."  + title.substr(-14);					
				} 
				return title;
				
			}
			
			public function selectSaveDir(event:*):void {
				try {
					var f:File = new File();
					f.browseForDirectory("Select directory to export your assets...");
					f.addEventListener(Event.SELECT, function(event:Event):void {
						model.defaultPathToPublish = f.nativePath;
					});
				} catch (e:Error) {
					trace('[Exception]' + e);					
				}
				
			}
			
			private var publishingOperation:ExportOperation;
			
			protected function publishButtonClick(event:MouseEvent):void
			{
				var itemsToPublish:Array = [];
				if (grid.selectedItems.length > 0) {
					for (var i:int = 0; i < grid.selectedItems.length; i++) {
						if (grid.selectedItems[i] is PublishingItem) { // если файл
							itemsToPublish.push(grid.selectedItems[i]);
						} else { // если папка
							for (var j:int = 0; j < grid.selectedItems[i].children.length; j++) {
								itemsToPublish.push((grid.selectedItems[i].children as ArrayCollection).getItemAt(j));	
							}
						}
					}
					//export selected
					publishingOperation = controller.export(itemsToPublish);
				} else {
					//export all
					publishingOperation = controller.export(model.dataProvider.source);
				}
				
				exportProgress.source = null;
				exportProgress.source = publishingOperation;
				exportProgress.setProgress(0, 100.0);
				exportProgress.visible = true;
				setTimeout(function():void {
					publishingOperation.publish(model.activeDocument.fullName.parent);
					publishingOperation.addEventListener(Event.COMPLETE, cleanupProgressBarState);
				}, 500);
			}
			
			protected function cleanupProgressBarState(event:Event):void {
				publishingOperation.removeEventListener(Event.COMPLETE, cleanupProgressBarState);
				exportProgress.setProgress(0, 100);
				exportProgress.visible = false;
			}
			
			protected function grid_itemClickHandler(event:ListEvent):void
			{
				if (event.itemRenderer.data is PublishingItem) 
					controller.changeArtboardToComposition(event.itemRenderer.data.assetComposition);
			}
			
			protected function grid_itemDoubleClickHandler(event:ListEvent):void
			{
				if (event.itemRenderer.data is PublishingItem) 
					controller.fitViewportToAssetComposition(event.itemRenderer.data.assetComposition);
			}
			
			protected function removeSelectedAssetButton_clickHandler(event:MouseEvent):void
			{
				if (grid.selectedCells && grid.selectedCells.length > 0) {
					for (var i:int = 0; i < grid.selectedCells.length; i++) {
						const itemIndex:int = grid.selectedCells[i].rowIndex;
						const dataObject:* = grid.indexToItemRenderer(itemIndex).data;
						if (dataObject is PublishingItem) {
							model.deleteFile(dataObject);	
						} else {
							for (var j:int = 0; j < dataObject.children.length; j++) {
								model.deleteFile(dataObject.children[j] as PublishingItem);	
							}
						}		
					}
				}
			}
			
			protected function updatePathToPublish():void {
				
				for (var i:int = 0; i < gc.currentGroups.length; i++) {
					if (gc.currentGroups[i].name)
					for (var j:int = 0; j < gc.currentGroups[i].children.length; j++) {
						gc.currentGroups[i].children[j].pathToPublish = gc.currentGroups[i].name; 
					}
				}
				model.save();
			}
			
			protected function grid_itemEditBeginningHandler(event:AdvancedDataGridEvent):void
			{
				// TODO Auto-generated method stub
				trace(event.item);
			}
			
			protected function grid_itemEditEndHandler(event:AdvancedDataGridEvent):void
			{
				// TODO Auto-generated method stub

			}
			
			public function myLabelFunction(item:Object, column:AdvancedDataGridColumn):String  {
				trace(column);
				trace(column.dataField);
				if (item is PublishingItem) return item[column.dataField];
				if (column.dataField == screenNameColumn.dataField)
					return item.pathToPublish;
				return null;
			}
		
		]]>
	</mx:Script>
	
	<mx:Style source="assets/css/style.css"/>

	
	<mx:Box id="disabledView" visible="{!model || model.state == AppModel.STATE_DISABLED}"
			width="100%" height="100%" horizontalCenter="0" includeInLayout="{this.visible}"
			verticalCenter="0">
		<mx:VBox left="40" top="100">
			<mx:Label text="Open document to start using Publisher"/>
		</mx:VBox>
	</mx:Box>
	
	<mx:Box id="welcomeView" visible="{model &amp;&amp; (model.state == AppModel.STATE_WELCOME)}"
			width="100%" height="100%" horizontalCenter="0" includeInLayout="{this.visible}"
			verticalCenter="0">
		<mx:VBox left="40" top="100">
			<mx:Label text="Welcome!"/>
			<mx:Label text="Set up assets now to start working."/>
			<mx:Button label="Import artboards" click="model.setupDefault()"/>
		</mx:VBox>
	</mx:Box>
	
	<mx:VBox id="mainView" visible="{model &amp;&amp; (model.state == AppModel.STATE_NORMAL)}"
			 width="100%" height="100%" includeInLayout="{this.visible}"
			 verticalGap="0"
			 horizontalGap="0"
			 paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0">
		<mx:VBox width="100%" height="100%" verticalGap="0"
				 horizontalGap="0"
				 paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0">
			
			<mx:AdvancedDataGrid id="grid" 
								 borderSkin="{null}"
								 width="100%" height="100%" 
								 dragEnabled="true"
								 dragMoveEnabled="true" 
								 dropEnabled="true" 
								 editable="true"
								 itemClick="grid_itemClickHandler(event)"
								 doubleClickEnabled="true" 
								 itemDoubleClick="grid_itemDoubleClickHandler(event)"
								 sortItemRenderer="{null}"
								 selectionMode="multipleRows"
								 groupItemRenderer="views.GroupedItemRenderer"
								 labelFunction="myLabelFunction"
								 paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0"
								 headerRenderer="skins.DataGridHeaderRenderer"
								 verticalGridLines="false"
								 headerStyleName="HeaderStyle"
								 headerColors="[0xFFFFFF, 0xFFFFFF]"
								 rowHeight="24"
								 verticalAlign="middle"
								 >
				<mx:dataProvider>
					<collections:MyGroupingCollection id="gc" source="{model.dataProvider}"
													  >
						<mx:Grouping label="pathToPublish">
							<mx:fields>
								<mx:GroupingField name="pathToPublish" />
							</mx:fields>
						</mx:Grouping>
						</collections:MyGroupingCollection>
				</mx:dataProvider>
				<mx:groupedColumns>   
					<mx:AdvancedDataGridColumn id="screenNameColumn" dataField="name"
											   headerText="SCREEN or  ASSET" sortable="false" 
											   editorDataField="text"
											   />
					<mx:AdvancedDataGridColumn id="fileTypeColumn" dataField="type" editable="false"
											   headerText="FILE TYPE" sortable="false" />
					<mx:AdvancedDataGridColumn id="dimensionColumn" dataField="dimensionsString"
											   editable="false" headerText="DIMENSION"
											   sortable="false" />
				</mx:groupedColumns>
				<mx:rendererProviders>
					<mx:AdvancedDataGridRendererProvider columnIndex="0" 
														 columnSpan="0" depth="1" renderer="views.GroupedItemRenderer" />
				</mx:rendererProviders>
			</mx:AdvancedDataGrid>

			<mx:ProgressBar id="exportProgress" width="100%" height="10"
							label="(%3%%) Published %1 files of %2" mode="event"
							visible="false"
							>
				<mx:showEffect>
					<mx:Fade duration="2000" />
				</mx:showEffect>
				<mx:hideEffect>
					<mx:Fade duration="2000" />
				</mx:hideEffect>
			</mx:ProgressBar>

			
				<mx:Canvas width="100%" height="28" styleName="bottomPanel">
					
					<mx:Canvas width="100%" height="100%" backgroundAlpha="1.0" >
						<mx:HBox width="100%" horizontalGap="2" height="27" backgroundAlpha="0.0">
							
							
							<mx:Button label=""
									   width="71" height="28"
									   click="publishButtonClick(event)" toolTip="Publish assets"
									   disabledSkin="@Embed(source='assets/icons/publish_btn.png')"
									   downSkin="@Embed(source='assets/icons/publish_btn.png')"
									   overSkin="@Embed(source='assets/icons/publish_btn_over.png')"
									   upSkin="@Embed(source='assets/icons/publish_btn.png')"
									   useHandCursor="true"
									   />
							
							<mx:Spacer width="100%"/>
							
							
							<mx:Button id="addNewFolderButton" width="24" height="28"
									   disabledSkin="@Embed(source='assets/icons/folder_24x28.png')"
									   downSkin="@Embed(source='assets/icons/folder_24x28.png')"
									   overSkin="@Embed(source='assets/icons/folder_24x28.png')"
									   upSkin="@Embed(source='assets/icons/folder_24x28.png')"
									   toolTip="New Folder"
									   alpha="0.75"
									   useHandCursor="true"
									   />
							
							<mx:Button id="addNewAssetButton" width="24" height="28"
									   click="addNewAsset_clickHandler(event)"
									   disabledSkin="@Embed(source='assets/icons/new24x28.png')"
									   downSkin="@Embed(source='assets/icons/new24x28.png')"
									   overSkin="@Embed(source='assets/icons/new24x28.png')"
									   upSkin="@Embed(source='assets/icons/new24x28.png')"
									   toolTip="New File"
									   alpha="0.75"
									   useHandCursor="true"
									   />
							
							<mx:Button id="removeSelectedAssetButton" width="24" height="28"
									   click="removeSelectedAssetButton_clickHandler(event)"
									   disabledSkin="@Embed(source='assets/icons/trash24x28.png')"
									   downSkin="@Embed(source='assets/icons/trash24x28.png')"
									   overSkin="@Embed(source='assets/icons/trash24x28.png')"
									   upSkin="@Embed(source='assets/icons/trash24x28.png')"
									   toolTip="Remove File"
									   alpha="0.75"
									   useHandCursor="true"
									   />
							
						</mx:HBox>
					</mx:Canvas>
					
					<mx:Canvas width="100%" height="1" backgroundAlpha="1.0" backgroundColor="0xac4f44" />
					
					

				</mx:Canvas>
						</mx:VBox>
	</mx:VBox>
</mx:Application>
	